#define BLOCK_SIZE (128 / 8)
#define AES128

#if defined(AES128)
#  define KEYSIZE 128
#  define NAME "AES 128"
#elif defined(AES192)
#  define KEYSIZE 192
#  define NAME "AES 192"
#elif defined(AES256)
#  define KEYSIZE 256
#  define NAME "AES 256"
#else
#  error "Define AES128, AES192 or AES256!"
#endif

#if KEYSIZE == 128
#  define Nk 4
#  define Nb 4
#  define Nr 10
#  define AES_128
#elif KEYSIZE == 192
#  define Nk 6
#  define Nb 4
#  define Nr 12
#  define AES_192
#elif KEYSIZE == 256
#  define Nk 8
#  define Nb 4
#  define Nr 14
#  define AES_256
#else
#  error
#endif



__constant uchar SBox[0x100]  = {
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
  0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
  0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
  0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
  0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
  0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
  0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
  0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
  0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
  0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
  0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
  0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
  0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
  0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
  0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
  0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
  0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

__constant uchar Rcon[0x100] = {
  0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
  0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
  0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a,
  0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
  0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25,
  0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
  0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
  0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
  0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6,
  0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
  0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
  0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
  0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01,
  0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
  0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e,
  0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
  0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
  0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
  0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
  0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
  0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
  0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
  0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91,
  0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
  0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d,
  0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
  0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
  0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
  0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa,
  0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
  0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
  0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};
#define RotWord(x) (((x) << 8) | ((x) >> (32 - 8)))

#define byte(x, n) (((x) >> 8*(n)) & 0xff)


// uint makeword(uchar a,uchar b,uchar c,uchar d){
//  return  (((uint)(a) << 24) | ((uint)(b) << 16) | ((uint)(c) << 8) | (d));
// }
#define makeword(a, b, c, d) \
  (((uint)(a) << 24) | ((uint)(b) << 16) | ((uint)(c) << 8) | (d))


#define SubWord(x) \
  makeword(SBox[byte(x, 3)], \
           SBox[byte(x, 2)], \
           SBox[byte(x, 1)], \
           SBox[byte(x, 0)])

// Combined operation for efficiency
#define SubWord_Rcon(x, i) \
  makeword(SBox[byte(x, 3)] ^ Rcon[i/Nk], \
           SBox[byte(x, 2)], \
           SBox[byte(x, 1)], \
           SBox[byte(x, 0)])



void KeyExpansion(uint key[Nk], uint w[Nb*(Nr+1)]) {
  #pragma unroll
  for (int i = 0; i < Nk; ++i) {
    w[i] = key[i];
  }

  #pragma unroll
  for (int i = Nk; i < Nb * (Nr + 1); ++i) {
    uint temp = w[i-1];

    if (i % Nk == 0) {
      temp = SubWord_Rcon(RotWord(temp), i);
    } else if (Nk > 6 && i % Nk == 4) {
      temp = SubWord(temp);
    }

    w[i] = w[i-Nk] ^ temp;
  }

#ifdef __LITTLE_ENDIAN__
#  warning "Little endian platform detected"
  // Flip key on little endian platforms
  #pragma unroll
  for (int i = 0; i < Nb*(Nr+1); ++i) {
    w[i] = byteswap(w[i]);
  }
#endif
}


void SubBytes(uchar *s) {
  #pragma unroll
  for (int i = 0; i < 4*Nb; ++i) {
    s[i] = SBox[s[i]];
  }
}


void AddRoundKey(uchar *_s, uint *w, int i) {
  uint *s = (uint*) _s;

  #pragma unroll
  for (int j = 0; j < Nb; ++j) {
    s[j] ^= w[i + j];
  }
}

// Tailored for 4x4 status matrix (original Rijndael allows different sizes)

void ShiftRows(uchar s[4*Nb]) {
  //static_assert(Nb == 4, "Our ShiftRows impl only works with Nb == 4");

  uchar t;
  t = s[ 1]; s[ 1] = s[ 5]; s[ 5] = s[ 9]; s[ 9] = s[13]; s[13] = t;
  t = s[ 2]; s[ 2] = s[10]; s[10] = t; t = s[ 6]; s[ 6] = s[14]; s[14] = t;
  t = s[ 7]; s[ 7] = s[ 3]; s[ 3] = s[15]; s[15] = s[11]; s[11] = t;
}


void MixColumns(uchar s[4*Nb]) {
  #pragma unroll
  for (int i = 0; i < 4; ++i) {
    uchar *r = s + 4*i;

    uchar a[4];
    uchar b[4];

    #pragma unroll
    for(int c = 0; c < 4; ++c) {
      a[c] = r[c];
      uchar h = (uchar)((uchar)r[c] >> 7);
      b[c] = r[c] << 1;
      b[c] ^= 0x1B & h;
    }

    r[0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
    r[1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
    r[2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
    r[3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];
  }
}

void Cipher(uchar in[4*Nb], uchar out[4*Nb], uint w[Nb*(Nr+1)]) {
  uchar state[4*Nb];

  #pragma unroll
  for (int i = 0; i < 4*Nb; ++i) {
    state[i] = in[i];
  }

  AddRoundKey(state, w, 0); // See Sec. 5.1.4
  

  #pragma unroll
  for (int round = 1; round < Nr; ++round) {
    SubBytes(state); // See Sec. 5.1.1
    ShiftRows(state); // See Sec. 5.1.2
    MixColumns(state); // See Sec. 5.1.3
    AddRoundKey(state, w, round*Nb);
  }

  SubBytes(state);
  ShiftRows(state);
  AddRoundKey(state, w, Nr*Nb);
  
  #pragma unroll
  for (int i = 0; i < 4*Nb; ++i) {
    out[i] = state[i];
  }
}


  


void aes_expand_encrypt(uint key[Nk],
                        uchar in[4*Nb],
                        uchar out[4*Nb]) {
  uint w[Nb*(Nr+1)];
  KeyExpansion(key, w);
  Cipher(in, out, w);
}


__kernel void hello(__global uchar* key,__global uchar* input,__global uchar* output,)
{
  uint key[Nk] = {0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f};
  uchar input[BLOCK_SIZE] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 
                            0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
  uchar right[BLOCK_SIZE] = {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
                            0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};
  uchar16 output;

  aes_expand_encrypt(key, input, &output);

  for(int i = 0;i< BLOCK_SIZE;i++){
    string[i] = Ã©output[i];
  }



     
}